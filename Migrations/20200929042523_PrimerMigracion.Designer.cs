// <auto-generated />
using System;
using DocumentosOnlineAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DocumentosOnlineAPI.Migrations
{
    [DbContext(typeof(DocumentosDbContext))]
    [Migration("20200929042523_PrimerMigracion")]
    partial class PrimerMigracion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Documento", b =>
                {
                    b.Property<int>("DocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("DocumentoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("SectorId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("EmpresaId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SectorId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Sectores");
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("HashPwd")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UsuarioId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.UsuarioSector", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "SectorId");

                    b.HasIndex("SectorId");

                    b.ToTable("UsuarioSectores");
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Documento", b =>
                {
                    b.HasOne("DocumentosOnlineAPI.Models.Empresa", "Empresa")
                        .WithMany("Documentos")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.HasOne("DocumentosOnlineAPI.Models.Sector", "Sector")
                        .WithMany("Documentos")
                        .HasForeignKey("SectorId")
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Sector", b =>
                {
                    b.HasOne("DocumentosOnlineAPI.Models.Empresa", "Empresa")
                        .WithMany("Sectores")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.Usuario", b =>
                {
                    b.HasOne("DocumentosOnlineAPI.Models.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentosOnlineAPI.Models.UsuarioSector", b =>
                {
                    b.HasOne("DocumentosOnlineAPI.Models.Sector", "Sector")
                        .WithMany("UsuarioSectores")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentosOnlineAPI.Models.Usuario", "Usuario")
                        .WithMany("UsuarioSectores")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
